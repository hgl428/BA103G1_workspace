package com.PetImage.controller;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.UnavailableException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.sql.DataSource;

import com.PetImage.model.PetImageService;
import com.PetImage.model.PetImageVO;

public class PassImageServlet extends HttpServlet {
	private static DataSource ds = null;
	static {
		try {
			Context ctx = new InitialContext();
			ds = (DataSource) ctx.lookup("java:comp/env/jdbc/TestDB");
		} catch (NamingException e) {
			e.printStackTrace();
		}
	}
	Connection con = null;

	public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {

		res.setContentType("image/gif"); // 傳進來是圖片型態
		ServletOutputStream out = res.getOutputStream(); // 用二位元輸出到瀏覽器
		String petNo = req.getParameter("petNo");
		int index = Integer.parseInt(req.getParameter("index"));
//		System.out.println(petNo);
		try {
			Statement stmt = con.createStatement(); // 下SQL指令
			ResultSet rs = stmt.executeQuery( // 執行後丟到RS
					"SELECT petPicture FROM petImage WHERE petNo=" + petNo);
			// "SELECT picture FROM emp_photo WHERE empno = 'C_2511'");
			// //抓圖的SQL指令
			
			for(int i = 0; i<(index-1);i++){
				rs.next();
			}
			
			if (rs.next()) { // RS裡的東西一個一個撈出來
				BufferedInputStream in = new BufferedInputStream(rs.getBinaryStream("petPicture"));
				// 用BufferedInputStream來處理，把rs裡想抓的照片以位元的方式放倒進去
				byte[] buf = new byte[4 * 1024]; // 4K buffer 水瓢
				int len; // 水桶
				while ((len = in.read(buf)) != -1) { // 一個水桶裝滿就倒
					out.write(buf, 0, len); // 最後從第一桶開始倒，倒到剩下，要小心最後一桶是倒全部還是倒剩下的。
				}
				in.close();
			} else {
				res.sendError(HttpServletResponse.SC_NOT_FOUND);
			}
			rs.close();
			stmt.close();
		} catch (Exception e) {
			System.out.println(e);
		}
	}

	public void init() throws ServletException {
		try {
			Context ctx = new javax.naming.InitialContext();
			DataSource ds = (DataSource) ctx.lookup("java:comp/env/jdbc/TestDB");
			con = ds.getConnection();
		} catch (Exception e) {
			throw new UnavailableException("Couldn't load JdbcOdbcDriver");
		}
	}

	public void destroy() {
		try {
			if (con != null)
				con.close();
		} catch (SQLException e) {
			System.out.println(e);
		}
	}

}
